(function () {
    'use strict';

    /**
     * 类型兼容
     *
     * 子类型可以赋予给父类型，从结构角度出发。ts比较的不是类型的名称，而是【结构上的属性和方法】。
     *
     * 对于函数的兼容性而言：【参数个数要少，传递的可以是父类， 返回值可以返回儿子】【少参、传入、返子】
     *
     * strictFunctionTypes：false。关闭双向协变
     */
    {
        // 2）枚举不具备兼容性问题 （枚举会生成一个对象）
        let E1;
        (function (E1) {
        })(E1 || (E1 = {}));
        console.log(E1);
        // ts 比较类型结构的时候比较的是【属性和方法】
        // 如果属性和方法都满足则兼容，有一些比较特殊
        // 基础类型和对象类型的兼容，接口的兼容， 泛型的兼容，枚举的兼容， 类的兼容
    }

})();
//# sourceMappingURL=bundle.js.map
